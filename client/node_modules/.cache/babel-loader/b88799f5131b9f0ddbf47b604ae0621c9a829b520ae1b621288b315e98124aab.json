{"ast":null,"code":"import toast from \"react-hot-toast\";\nexport const usernameValidate = (values, props /* only available when using withFormik */) => {\n  const errors = {};\n  if (!values.username) {\n    errors.username = toast.error('Username Required...!');\n  } else if (values.username.includes(\" \")) {\n    errors.username = toast.error('Invalid Username..!');\n  }\n  return errors;\n};\nexport const password = (values, props) => {\n  let regularExpression = /^[a-zA-Z0-9!@#$%^&*]{6,16}$/;\n  const errors = {};\n  if (!values.password) {\n    errors.password = toast.error('Password Required...!');\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error('Wrong Password!');\n  } else if (!values.test(regularExpression)) {\n    errors.password = toast.error('password should contain special characters');\n  } else if (values.password.length < 6) {\n    errors.password = toast.error('Password length should be greater than 6');\n  }\n  return errors;\n};","map":{"version":3,"names":["toast","usernameValidate","values","props","errors","username","error","includes","password","regularExpression","test","length"],"sources":["/Users/pratikprajapati/Documents/GitHub/Login-with-Auth/client/src/helper/validate.js"],"sourcesContent":["import toast from \"react-hot-toast\";\n\nexport const usernameValidate = (values, props /* only available when using withFormik */) => {\n    const errors = {};\n    if (!values.username) {\n        errors.username = toast.error('Username Required...!');\n    } else if (values.username.includes(\" \")) {\n        errors.username = toast.error('Invalid Username..!');\n    }\n\n    return errors;\n};\n\nexport const password = (values, props) => {\n    let regularExpression  = /^[a-zA-Z0-9!@#$%^&*]{6,16}$/;\n    const errors = {};\n    if (!values.password) {\n        errors.password = toast.error('Password Required...!');\n    } else if (values.password.includes(\" \")) {\n        errors.password = toast.error('Wrong Password!');\n    } else if(!values.test(regularExpression)){\n        errors.password = toast.error('password should contain special characters');\n    } else if(values.password.length < 6){\n        errors.password = toast.error('Password length should be greater than 6');\n    }\n\n    return errors;\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;AAEnC,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,KAAK,CAAC,+CAA+C;EAC1F,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,IAAI,CAACF,MAAM,CAACG,QAAQ,EAAE;IAClBD,MAAM,CAACC,QAAQ,GAAGL,KAAK,CAACM,KAAK,CAAC,uBAAuB,CAAC;EAC1D,CAAC,MAAM,IAAIJ,MAAM,CAACG,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IACtCH,MAAM,CAACC,QAAQ,GAAGL,KAAK,CAACM,KAAK,CAAC,qBAAqB,CAAC;EACxD;EAEA,OAAOF,MAAM;AACjB,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAGA,CAACN,MAAM,EAAEC,KAAK,KAAK;EACvC,IAAIM,iBAAiB,GAAI,6BAA6B;EACtD,MAAML,MAAM,GAAG,CAAC,CAAC;EACjB,IAAI,CAACF,MAAM,CAACM,QAAQ,EAAE;IAClBJ,MAAM,CAACI,QAAQ,GAAGR,KAAK,CAACM,KAAK,CAAC,uBAAuB,CAAC;EAC1D,CAAC,MAAM,IAAIJ,MAAM,CAACM,QAAQ,CAACD,QAAQ,CAAC,GAAG,CAAC,EAAE;IACtCH,MAAM,CAACI,QAAQ,GAAGR,KAAK,CAACM,KAAK,CAAC,iBAAiB,CAAC;EACpD,CAAC,MAAM,IAAG,CAACJ,MAAM,CAACQ,IAAI,CAACD,iBAAiB,CAAC,EAAC;IACtCL,MAAM,CAACI,QAAQ,GAAGR,KAAK,CAACM,KAAK,CAAC,4CAA4C,CAAC;EAC/E,CAAC,MAAM,IAAGJ,MAAM,CAACM,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAC;IACjCP,MAAM,CAACI,QAAQ,GAAGR,KAAK,CAACM,KAAK,CAAC,0CAA0C,CAAC;EAC7E;EAEA,OAAOF,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}