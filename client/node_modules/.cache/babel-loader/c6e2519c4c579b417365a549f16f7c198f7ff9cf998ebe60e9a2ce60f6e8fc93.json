{"ast":null,"code":"//convert image into base64\n\nexport function convertToBase64(file) {\n  return new Promise((resolve, reject) => {\n    // Create a new FileReader instance\n    const fileReader = new FileReader();\n\n    // Read the file as a data URL (base64)\n    fileReader.readAsDataURL(file);\n\n    // When the read operation is successfully completed\n    fileReader.onload = () => {\n      // Resolve the Promise with the base64 result\n      resolve(fileReader.result);\n    };\n\n    // If there's an error during the read operation\n    fileReader.onerror = error => {\n      // Reject the Promise with the error\n      reject(error);\n    };\n  });\n}","map":{"version":3,"names":["convertToBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","error"],"sources":["/Users/pratikprajapati/Documents/GitHub/Login-with-Auth/client/src/helper/convert.js"],"sourcesContent":["//convert image into base64\n\nexport function convertToBase64(file) {\n    return new Promise((resolve, reject) => {\n        // Create a new FileReader instance\n        const fileReader = new FileReader();\n\n        // Read the file as a data URL (base64)\n        fileReader.readAsDataURL(file);\n\n        // When the read operation is successfully completed\n        fileReader.onload = () => {\n            // Resolve the Promise with the base64 result\n            resolve(fileReader.result);\n        }\n\n        // If there's an error during the read operation\n        fileReader.onerror = (error) => {\n            // Reject the Promise with the error\n            reject(error);\n        }\n    });\n}\n"],"mappings":"AAAA;;AAEA,OAAO,SAASA,eAAeA,CAACC,IAAI,EAAE;EAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC;IACA,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;;IAEnC;IACAD,UAAU,CAACE,aAAa,CAACN,IAAI,CAAC;;IAE9B;IACAI,UAAU,CAACG,MAAM,GAAG,MAAM;MACtB;MACAL,OAAO,CAACE,UAAU,CAACI,MAAM,CAAC;IAC9B,CAAC;;IAED;IACAJ,UAAU,CAACK,OAAO,GAAIC,KAAK,IAAK;MAC5B;MACAP,MAAM,CAACO,KAAK,CAAC;IACjB,CAAC;EACL,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}